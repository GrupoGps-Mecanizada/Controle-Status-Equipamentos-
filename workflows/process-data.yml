# .github/workflows/process-data.yml
# Coloque este arquivo em AMBOS os reposit√≥rios

name: Auto Process Fleet Data
on:
  push:
    paths:
      - 'data/**'  # Executa quando arquivos em /data/ s√£o alterados
  schedule:
    - cron: '*/5 * * * *'  # A cada 5 minutos
  workflow_dispatch:  # Permite execu√ß√£o manual

jobs:
  process-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Para comparar mudan√ßas

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for Data Changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "data/"; then
            echo "data_changed=true" >> $GITHUB_OUTPUT
            echo "üìä Dados alterados - processando..."
          else
            echo "data_changed=false" >> $GITHUB_OUTPUT
            echo "üìä Nenhuma altera√ß√£o nos dados"
          fi

      - name: Process CSV Data
        if: steps.changes.outputs.data_changed == 'true' && contains(github.repository, 'Apontamento')
        run: |
          echo "üîÑ Processando dados CSV..."
          # Validar formato CSV
          if [ -f "data/apontamentos-atuais.csv" ]; then
            lines=$(wc -l < data/apontamentos-atuais.csv)
            echo "üìä CSV: $lines linhas processadas"
            
            # Gerar estat√≠sticas
            mkdir -p processed
            echo "{
              \"lastUpdate\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"totalRecords\": $((lines-1)),
              \"source\": \"csv\",
              \"status\": \"processed\"
            }" > processed/csv-stats.json
            
            echo "‚úÖ CSV processado com sucesso"
          else
            echo "‚ùå Arquivo CSV n√£o encontrado"
          fi

      - name: Process JSON Data  
        if: steps.changes.outputs.data_changed == 'true' && contains(github.repository, 'Status-Equipamentos')
        run: |
          echo "üîÑ Processando dados JSON..."
          # Validar e processar JSON
          if [ -f "data/latest-fleet-data.json" ]; then
            # Verificar se √© JSON v√°lido
            if jq empty data/latest-fleet-data.json; then
              records=$(jq '.records | length' data/latest-fleet-data.json)
              echo "üìä JSON: $records registros processados"
              
              # Gerar estat√≠sticas
              mkdir -p processed
              echo "{
                \"lastUpdate\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                \"totalRecords\": $records,
                \"source\": \"json\", 
                \"status\": \"processed\"
              }" > processed/json-stats.json
              
              # Gerar resumo por equipamento
              jq -r '.records | group_by(.vacancy_code) | map({
                equipment: .[0].vacancy_code,
                name: .[0].vacancy_name,
                events: length,
                lastStatus: (sort_by(.captured_at) | last | .status_title)
              })' data/latest-fleet-data.json > processed/equipment-summary.json
              
              echo "‚úÖ JSON processado com sucesso"
            else
              echo "‚ùå JSON inv√°lido"
              exit 1
            fi
          else
            echo "‚ùå Arquivo JSON n√£o encontrado"
          fi

      - name: Update Processed Data
        if: steps.changes.outputs.data_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -d "processed" ]; then
            git add processed/
            git commit -m "Auto-update processed data $(date)" || echo "Nada para commitar"
            git push || echo "Nada para enviar"
          fi

      - name: Trigger Dashboard Update
        if: steps.changes.outputs.data_changed == 'true'
        run: |
          # Webhook para notificar dashboard (opcional)
          echo "üîî Notificando dashboard sobre atualiza√ß√£o..."
          # curl -X POST "SEU_WEBHOOK_URL" -H "Content-Type: application/json" -d '{"status":"updated","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'

      - name: Generate README Stats
        if: steps.changes.outputs.data_changed == 'true'
        run: |
          echo "üìä Atualizando README com estat√≠sticas..."
          
          # Para repo CSV
          if [ -f "data/apontamentos-atuais.csv" ]; then
            lines=$(wc -l < data/apontamentos-atuais.csv)
            echo "# üìä Apontamentos GrupoGPS
            
            ## Status Atual
            - **Total de Registros**: $((lines-1))
            - **√öltima Atualiza√ß√£o**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)
            - **Status**: ‚úÖ Dados Atualizados
            
            ## Arquivos
            - \`data/apontamentos-atuais.csv\` - Dados principais
            - \`processed/csv-stats.json\` - Estat√≠sticas processadas
            
            ---
            *Atualizado automaticamente via GitHub Actions*" > README.md
          fi
          
          # Para repo JSON
          if [ -f "data/latest-fleet-data.json" ]; then
            records=$(jq '.records | length' data/latest-fleet-data.json 2>/dev/null || echo "0")
            echo "# üîÑ Status Equipamentos GrupoGPS
            
            ## Status Atual
            - **Total de Registros**: $records
            - **√öltima Atualiza√ß√£o**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)  
            - **Status**: ‚úÖ Dados Atualizados
            
            ## Arquivos
            - \`data/latest-fleet-data.json\` - Dados principais
            - \`processed/json-stats.json\` - Estat√≠sticas processadas
            - \`processed/equipment-summary.json\` - Resumo por equipamento
            
            ---
            *Atualizado automaticamente via GitHub Actions*" > README.md
          fi
          
          # Commit README
          git add README.md
          git commit -m "Auto-update README stats $(date)" || echo "README sem altera√ß√µes"
          git push || echo "Nada para enviar"
