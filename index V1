<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle De Status Equipamentos - GrupoGPS</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --bg-tertiary: #334155;
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --text-muted: #64748b;
            --accent-primary: #3b82f6;
            --accent-secondary: #06b6d4;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #8b5cf6;
            --orange: #f97316;
            --border: #334155;
            --border-light: #475569;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.4);
            --radius: 8px;
            --radius-lg: 12px;
            --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        }

        [data-theme="light"] {
            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --bg-tertiary: #e2e8f0;
            --text-primary: #0f172a;
            --text-secondary: #334155;
            --text-muted: #64748b;
            --border: #e2e8f0;
            --border-light: #cbd5e1;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.5;
            transition: var(--transition);
            overflow-x: hidden;
        }

        .app-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Header */
        .header {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(10px);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-brand {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .header-brand h1 {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .header-brand .logo {
            width: 40px;
            height: 40px;
            background: var(--accent-primary);
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
        }

        .header-controls {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .theme-toggle, .refresh-btn, .export-btn {
            background: var(--bg-tertiary);
            border: 1px solid var(--border);
            color: var(--text-primary);
            padding: 8px 16px;
            border-radius: var(--radius);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.875rem;
        }

        .theme-toggle:hover, .refresh-btn:hover, .export-btn:hover {
            background: var(--bg-primary);
            border-color: var(--border-light);
        }

        .last-update {
            font-size: 0.875rem;
            color: var(--text-muted);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            max-width: 1600px;
            margin: 0 auto;
            width: 100%;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
            border: 1px solid var(--border);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
            opacity: 0;
            transition: var(--transition);
        }

        .stat-card:hover {
            border-color: var(--border-light);
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card:hover::before {
            opacity: 1;
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .stat-title {
            font-size: 0.875rem;
            color: var(--text-muted);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            font-weight: 500;
        }

        .stat-icon {
            width: 32px;
            height: 32px;
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .stat-change {
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .stat-change.positive {
            color: var(--success);
        }

        .stat-change.negative {
            color: var(--danger);
        }

        /* Controls */
        .controls {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
            border: 1px solid var(--border);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
            margin-bottom: 2rem;
            backdrop-filter: blur(10px);
        }

        .controls-grid {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr auto auto;
            gap: 1.5rem;
            align-items: end;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .control-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .control-input, .control-select {
            background: var(--bg-primary);
            border: 2px solid var(--border);
            border-radius: var(--radius);
            padding: 12px 16px;
            color: var(--text-primary);
            font-size: 0.875rem;
            transition: var(--transition);
            font-weight: 500;
        }

        .control-input:focus, .control-select:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            transform: translateY(-1px);
        }

        .search-input {
            position: relative;
        }

        .search-input i {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
            font-size: 0.875rem;
            transition: var(--transition);
        }

        .search-input input {
            padding-left: 44px;
        }

        .search-input input:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            transform: translateY(-1px);
        }

        /* Equipment Table */
        .equipment-table {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
            border: 1px solid var(--border);
            border-radius: var(--radius-lg);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .table-header {
            background: var(--bg-tertiary);
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid var(--border);
        }

        .table-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .table-title::before {
            content: '';
            width: 4px;
            height: 20px;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            border-radius: 2px;
        }

        .view-toggle {
            display: flex;
            background: var(--bg-primary);
            border-radius: calc(var(--radius) + 2px);
            padding: 4px;
            border: 2px solid var(--border);
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }

        .view-btn {
            background: transparent;
            border: none;
            padding: 8px 16px;
            border-radius: var(--radius);
            color: var(--text-muted);
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.875rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .view-btn.active {
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            color: white;
            box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
        }

        .view-btn:not(.active):hover {
            color: var(--text-primary);
            background: var(--bg-secondary);
        }

        .equipment-list {
            max-height: 600px;
            overflow-y: auto;
        }

        /* Enhanced equipment row layout */
        .equipment-row {
            border-bottom: 1px solid var(--border);
            padding: 1rem 1.5rem;
            display: grid;
            grid-template-columns: auto 1fr auto auto 120px;
            gap: 1rem;
            align-items: center;
            transition: var(--transition);
        }

        .equipment-row:hover {
            background: var(--bg-tertiary);
        }

        .equipment-row:last-child {
            border-bottom: none;
        }

        .equipment-status {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            position: relative;
        }

        .equipment-status.active {
            background: var(--success);
            box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
        }

        .equipment-status.inactive {
            background: var(--text-muted);
        }

        .equipment-status.maintenance {
            background: var(--orange);
            box-shadow: 0 0 0 2px rgba(249, 115, 22, 0.2);
        }

        .equipment-status.error {
            background: var(--danger);
            box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2);
        }

        .equipment-status.active::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 6px;
            height: 6px;
            background: white;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .equipment-info {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .equipment-name {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.875rem;
        }

        .equipment-code {
            font-size: 0.75rem;
            color: var(--text-muted);
            font-family: 'Monaco', 'Menlo', monospace;
        }

        /* Enhanced equipment status badges */
        .equipment-current-status {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            border-radius: var(--radius);
            font-size: 0.75rem;
            font-weight: 600;
            white-space: nowrap;
            position: relative;
        }

        .equipment-timeline {
            width: 120px;
            height: 20px;
            background: var(--bg-primary);
            border-radius: 10px;
            overflow: hidden;
            position: relative;
            border: 1px solid var(--border);
        }

        .timeline-segment {
            height: 100%;
            float: left;
            transition: var(--transition);
        }

        .equipment-duration {
            font-size: 0.875rem;
            color: var(--text-secondary);
            font-weight: 500;
            text-align: right;
            min-width: 60px;
        }

        /* Status Colors */
        .status-on {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .status-off {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .status-maintenance {
            background: rgba(249, 115, 22, 0.1);
            color: #f97316;
            border: 1px solid rgba(249, 115, 22, 0.3);
        }

        .status-stopped {
            background: rgba(245, 158, 11, 0.1);
            color: #f59e0b;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        .status-secondary_motor_on {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .status-not_appropriated {
            background: rgba(139, 92, 246, 0.1);
            color: #8b5cf6;
            border: 1px solid rgba(139, 92, 246, 0.3);
        }

        .status-out_of_plant {
            background: rgba(139, 92, 246, 0.1);
            color: #8b5cf6;
            border: 1px solid rgba(139, 92, 246, 0.3);
        }

        .status-no_data {
            background: rgba(71, 85, 105, 0.1);
            color: #475569;
            border: 1px solid rgba(71, 85, 105, 0.3);
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 3rem;
            color: var(--text-muted);
        }

        .loading i {
            font-size: 2rem;
            margin-bottom: 1rem;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* File Upload */
        .file-upload {
            position: relative;
            display: inline-block;
        }

        .file-upload input[type="file"] {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-upload-btn {
            background: var(--accent-primary);
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: var(--radius);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.875rem;
        }

        .file-upload-btn:hover {
            background: #2563eb;
        }

        /* Equipment Grid Container */
        .equipment-grid {
            display: none;
            grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));
            gap: 1.5rem;
            padding: 1.5rem;
        }

        /* Enhanced Equipment Cards */
        .equipment-card {
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .equipment-card:hover {
            border-color: var(--border-light);
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .equipment-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--text-muted);
            transition: var(--transition);
        }

        .equipment-card.active::before {
            background: linear-gradient(90deg, var(--success), #34d399);
        }

        .equipment-card.maintenance::before {
            background: linear-gradient(90deg, var(--orange), #fbbf24);
        }

        .equipment-card.error::before {
            background: linear-gradient(90deg, var(--danger), #f87171);
        }

        /* Card Header */
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 1rem;
        }

        .equipment-title-section {
            flex: 1;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-primary);
            line-height: 1.2;
            margin-bottom: 0.25rem;
        }

        .card-subtitle {
            font-size: 0.875rem;
            color: var(--text-muted);
            font-family: 'Monaco', 'Menlo', monospace;
            margin-bottom: 0.5rem;
        }

        .operational-badge {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .operational-badge.operational {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }

        .operational-badge.stopped {
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger);
        }

        .card-status-section {
            text-align: right;
            flex-shrink: 0;
        }

        .card-status-badge {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: var(--radius);
            font-size: 0.75rem;
            font-weight: 600;
            white-space: nowrap;
            margin-bottom: 0.5rem;
        }

        .last-update {
            font-size: 0.7rem;
            color: var(--text-muted);
            opacity: 0.8;
        }

        /* Motor Desligado - Simplified Warning */
        .motor-off-warning {
            background: var(--danger);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.65rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            display: inline-flex;
            align-items: center;
            gap: 4px;
            margin-left: 8px;
            animation: pulse 2s infinite;
        }

        /* Status Events List */
        .status-events {
            background: var(--bg-secondary);
            border-radius: var(--radius);
            padding: 0.75rem;
            max-height: 200px;
            overflow-y: auto;
        }

        .events-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--border);
        }

        .events-title {
            font-size: 0.8rem;
            font-weight: 600;
            color: var(--text-secondary);
        }

        .events-count {
            font-size: 0.7rem;
            color: var(--text-muted);
            background: var(--bg-primary);
            padding: 2px 6px;
            border-radius: 10px;
        }

        .event-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            margin-bottom: 0.25rem;
            background: var(--bg-primary);
            border-radius: 4px;
            border-left: 3px solid var(--border);
            transition: var(--transition);
        }

        .event-item:hover {
            background: var(--bg-tertiary);
            transform: translateX(2px);
        }

        .event-status {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .event-details {
            text-align: right;
            font-size: 0.7rem;
            color: var(--text-muted);
        }

        .event-duration {
            font-weight: 600;
            color: var(--text-secondary);
        }

        .event-time {
            margin-top: 2px;
            font-family: 'Monaco', 'Menlo', monospace;
        }

        /* Charts Container */
        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .chart-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
        }

        .chart-title {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 1rem;
        }

        .chart-container {
            position: relative;
            height: 200px;
        }

        /* Footer */
        .footer {
            background: var(--bg-secondary);
            border-top: 1px solid var(--border);
            padding: 1rem 2rem;
            text-align: center;
            color: var(--text-muted);
            font-size: 0.875rem;
        }

        .footer a {
            color: var(--accent-primary);
            text-decoration: none;
            font-weight: 600;
        }

        .footer a:hover {
            text-decoration: underline;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .controls-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .equipment-row {
                grid-template-columns: auto 1fr auto;
                gap: 0.75rem;
            }

            .equipment-timeline {
                display: none;
            }

            .equipment-grid {
                grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .main-content {
                padding: 1rem;
            }

            .header {
                padding: 1rem;
                flex-direction: column;
                gap: 1rem;
            }

            .header-controls {
                order: -1;
                width: 100%;
                justify-content: space-between;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 1rem;
            }

            .equipment-row {
                grid-template-columns: auto 1fr;
                gap: 0.5rem;
            }

            .equipment-duration {
                display: none;
            }

            .charts-grid {
                grid-template-columns: 1fr;
            }

            .equipment-grid {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
        }

        /* Scrollbar */
        .equipment-list::-webkit-scrollbar,
        .status-events::-webkit-scrollbar {
            width: 6px;
        }

        .equipment-list::-webkit-scrollbar-track,
        .status-events::-webkit-scrollbar-track {
            background: var(--bg-primary);
        }

        .equipment-list::-webkit-scrollbar-thumb,
        .status-events::-webkit-scrollbar-thumb {
            background: var(--border-light);
            border-radius: 3px;
        }

        .equipment-list::-webkit-scrollbar-thumb:hover,
        .status-events::-webkit-scrollbar-thumb:hover {
            background: var(--text-muted);
        }
    </style>
</head>
<body>
    <div class="app-container">
        <header class="header">
            <div class="header-brand">
                <div class="logo">
                    <i class="fas fa-truck"></i>
                </div>
                <h1>Controle De Status Equipamentos - GrupoGPS</h1>
            </div>
            <div class="header-controls">
                <div class="last-update" id="lastUpdate">
                    Última atualização: --:--
                </div>
                <button class="theme-toggle" onclick="toggleTheme()">
                    <i class="fas fa-moon" id="themeIcon"></i>
                    <span>Tema</span>
                </button>
                <button class="refresh-btn" onclick="refreshDashboard()">
                    <i class="fas fa-sync-alt" id="refreshIcon"></i>
                    <span>Atualizar</span>
                </button>
                <button class="export-btn" onclick="exportReport()">
                    <i class="fas fa-download"></i>
                    <span>Exportar</span>
                </button>
            </div>
        </header>

        <main class="main-content">
            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Total de Equipamentos</div>
                        <div class="stat-icon" style="background: rgba(59, 130, 246, 0.1); color: var(--accent-primary);">
                            <i class="fas fa-truck"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="totalEquipments">0</div>
                    <div class="stat-change">
                        <i class="fas fa-info-circle"></i>
                        <span>Frota completa</span>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Motores Ligados</div>
                        <div class="stat-icon" style="background: rgba(16, 185, 129, 0.1); color: #10b981;">
                            <i class="fas fa-play"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="motorsOn">0</div>
                    <div class="stat-change positive" id="motorsOnChange">
                        <i class="fas fa-arrow-up"></i>
                        <span>Em operação</span>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Motores Desligados</div>
                        <div class="stat-icon" style="background: rgba(239, 68, 68, 0.1); color: #ef4444;">
                            <i class="fas fa-stop"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="motorsOff">0</div>
                    <div class="stat-change negative" id="motorsOffChange">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>Crítico</span>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Em Manutenção</div>
                        <div class="stat-icon" style="background: rgba(249, 115, 22, 0.1); color: #f97316;">
                            <i class="fas fa-tools"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="maintenanceEquipments">0</div>
                    <div class="stat-change" id="maintenanceChange">
                        <i class="fas fa-wrench"></i>
                        <span>Manutenção</span>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Parado Ligado</div>
                        <div class="stat-icon" style="background: rgba(245, 158, 11, 0.1); color: #f59e0b;">
                            <i class="fas fa-pause"></i>
                        </div>
                    </div>
                    <div class="stat-value" id="stoppedEquipments">0</div>
                    <div class="stat-change" id="stoppedChange">
                        <i class="fas fa-pause-circle"></i>
                        <span>Standby</span>
                    </div>
                </div>
            </div>

            <!-- Charts -->
            <div class="charts-grid">
                <div class="chart-card">
                    <div class="chart-title">Distribuição de Status</div>
                    <div class="chart-container">
                        <canvas id="statusChart"></canvas>
                    </div>
                </div>
                <div class="chart-card">
                    <div class="chart-title">Performance por Equipamento</div>
                    <div class="chart-container">
                        <canvas id="efficiencyChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Controls -->
            <div class="controls">
                <div class="controls-grid">
                    <div class="control-group">
                        <label class="control-label">Buscar Equipamentos</label>
                        <div class="search-input">
                            <i class="fas fa-search"></i>
                            <input type="text" class="control-input" id="searchInput" 
                                   placeholder="Digite nome ou código do equipamento...">
                        </div>
                    </div>
                    
                    <div class="control-group">
                        <label class="control-label">Filtrar por Status</label>
                        <select class="control-select" id="statusFilter">
                            <option value="">Todos os status</option>
                        </select>
                    </div>
                    
                    <div class="control-group">
                        <label class="control-label">Ordenar por</label>
                        <select class="control-select" id="sortBy">
                            <option value="name">Nome</option>
                            <option value="status">Status</option>
                            <option value="duration">Duração</option>
                            <option value="efficiency">Eficiência</option>
                        </select>
                    </div>
                    
                    <div class="file-upload">
                        <input type="file" id="csvFile" accept=".csv">
                        <button class="file-upload-btn">
                            <i class="fas fa-upload"></i>
                            Carregar CSV
                        </button>
                    </div>
                </div>
            </div>

            <!-- Equipment Table -->
            <div class="equipment-table">
                <div class="table-header">
                    <div class="table-title">Equipamentos da Frota</div>
                    <div class="view-toggle">
                        <button class="view-btn active" onclick="setView('list')">
                            <i class="fas fa-list"></i> Lista
                        </button>
                        <button class="view-btn" onclick="setView('grid')">
                            <i class="fas fa-th-large"></i> Grade
                        </button>
                    </div>
                </div>
                
                <div class="loading" id="loading">
                    <i class="fas fa-spinner"></i>
                    <div>Carregando dados da frota...</div>
                </div>
                
                <div class="equipment-list" id="equipmentList" style="display: none;">
                    <!-- Equipment rows will be generated here -->
                </div>
                
                <div class="equipment-grid" id="equipmentGrid">
                    <!-- Equipment cards will be generated here -->
                </div>
            </div>
        </main>

        <footer class="footer">
            <p>Desenvolvido por <a href="#">Warlison Abreu</a> | &copy; 2025 GrupoGPS - Todos os direitos reservados</p>
        </footer>
    </div>

    <script>
        let fleetData = [];
        let filteredData = [];
        let currentTheme = 'dark';
        let statusChart, efficiencyChart;

        // Utility function to correctly abbreviate equipment names
        function abbreviateEquipmentName(name) {
            if (!name) return name;
            
            // Convert to uppercase for consistent processing
            const upperName = name.toUpperCase();
            
            // Extract GPS number pattern (GPS - XX or similar)
            const gpsMatch = upperName.match(/GPS\s*-?\s*(\d+)/);
            if (!gpsMatch) return name; // Return original if no GPS pattern found
            
            const gpsNumber = gpsMatch[1].padStart(2, '0'); // Ensure 2 digits
            
            // Determine equipment type and shift
            let equipmentType = '';
            let shift = '';
            
            if (upperName.includes('ALTA PRESSÃO') || upperName.includes('AP')) {
                equipmentType = 'AP';
            } else if (upperName.includes('AUTO VÁCUO') || upperName.includes('VÁCUO') || upperName.includes('AV')) {
                equipmentType = 'AV';
            } else if (upperName.includes('HIPERVÁCUO') || upperName.includes('HIPERVACUO') || upperName.includes('HV')) {
                equipmentType = 'HV';
            } else {
                // Fallback to original abbreviation logic
                return name.length > 15 ? name.substring(0, 12) + '...' : name;
            }
            
            // Determine shift based on common patterns or GPS number
            // This is a simplified logic - you may need to adjust based on your actual data
            const gpsNum = parseInt(gpsNumber);
            if (gpsNum <= 8) {
                shift = '16HS'; // 16-hour shift
            } else {
                shift = '24HS'; // 24-hour shift
            }
            
            return `${equipmentType}-${gpsNumber}-${shift}`;
        }

        // Format time range for events
        function formatTimeRange(startTime, endTime) {
            const start = new Date(startTime);
            const end = new Date(endTime);
            
            const formatTime = (date) => {
                return date.toLocaleTimeString('pt-BR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            };
            
            return `${formatTime(start)} - ${formatTime(end)}`;
        }

        // Updated status configuration with correct colors
        const statusConfig = {
            'on': { 
                name: 'Motor Ligado', 
                icon: 'fas fa-play', 
                active: true, 
                color: '#10b981',
                priority: 1 
            },
            'secondary_motor_on': { 
                name: 'Motor Secundário', 
                icon: 'fas fa-cog', 
                active: true, 
                color: '#3b82f6',
                priority: 2 
            },
            'stopped': { 
                name: 'Parado Ligado', 
                icon: 'fas fa-pause', 
                active: false, 
                color: '#f59e0b',
                priority: 3 
            },
            'off': { 
                name: 'Motor Desligado', 
                icon: 'fas fa-stop', 
                active: false, 
                color: '#ef4444',
                priority: 4 
            },
            'maintenance': { 
                name: 'Em Manutenção', 
                icon: 'fas fa-tools', 
                active: false, 
                color: '#f97316',
                priority: 5 
            },
            'not_appropriated': { 
                name: 'Sem Apropriação', 
                icon: 'fas fa-ban', 
                active: false, 
                color: '#8b5cf6',
                priority: 6 
            },
            'out_of_plant': { 
                name: 'Fora da Planta', 
                icon: 'fas fa-location-arrow', 
                active: false, 
                color: '#8b5cf6',
                priority: 7 
            },
            'no_data': { 
                name: 'Sem Dados', 
                icon: 'fas fa-question', 
                active: false, 
                color: '#475569',
                priority: 8 
            },
            'undefined': { 
                name: 'Indefinido', 
                icon: 'fas fa-question-circle', 
                active: false, 
                color: '#475569',
                priority: 9 
            }
        };

        // Initialize application
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            setupEventListeners();
            loadDefaultData();
            updateLastUpdateTime();
            initializeCharts();
        }

        function setupEventListeners() {
            document.getElementById('searchInput').addEventListener('input', debounce(applyFilters, 300));
            document.getElementById('statusFilter').addEventListener('change', applyFilters);
            document.getElementById('sortBy').addEventListener('change', applyFilters);
            document.getElementById('csvFile').addEventListener('change', handleFileUpload);
            
            // Keyboard shortcuts
            document.addEventListener('keydown', handleKeyboardShortcuts);
        }

        function handleKeyboardShortcuts(event) {
            if (event.ctrlKey || event.metaKey) {
                switch(event.key) {
                    case 'r':
                        event.preventDefault();
                        refreshDashboard();
                        break;
                    case 'f':
                        event.preventDefault();
                        document.getElementById('searchInput').focus();
                        break;
                    case 'd':
                        event.preventDefault();
                        toggleTheme();
                        break;
                }
            }
        }

        function loadDefaultData() {
            if (window.fs && window.fs.readFile) {
                window.fs.readFile('gaussfleettimeline20250623T113722.csv', { encoding: 'utf8' })
                    .then(csvContent => {
                        processCSVData(csvContent);
                    })
                    .catch(error => {
                        console.error('Error loading default CSV:', error);
                        hideLoading();
                    });
            } else {
                hideLoading();
            }
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file && file.type === 'text/csv') {
                const reader = new FileReader();
                reader.onload = function(e) {
                    processCSVData(e.target.result);
                };
                reader.readAsText(file);
                showLoading();
            }
        }

        function processCSVData(csvContent) {
            Papa.parse(csvContent, {
                header: true,
                delimiter: ';',
                skipEmptyLines: true,
                dynamicTyping: false,
                complete: function(results) {
                    fleetData = results.data
                        .filter(row => 
                            row.vacancy_code && 
                            row.vacancy_name && 
                            row.status_code &&
                            row.vacancy_code !== 'undefined' &&
                            row.vacancy_code.trim() !== ''
                        )
                        .map(row => ({
                            ...row,
                            vacancy_code: row.vacancy_code.toString().trim(),
                            total_time_h: parseFloat(row.total_time_h) || 0,
                            vacancy_name: row.vacancy_name.trim(),
                            status_code: row.status_code.trim(),
                            status_descr: row.status_descr ? row.status_descr.trim() : '',
                            start: new Date(row.start),
                            end: new Date(row.end),
                            captured_at: new Date(row.captured_at)
                        }));
                    
                    populateFilters();
                    applyFilters();
                    updateCharts();
                    hideLoading();
                    updateLastUpdateTime();
                },
                error: function(error) {
                    console.error('Error parsing CSV:', error);
                    hideLoading();
                }
            });
        }

        function populateFilters() {
            const statusFilter = document.getElementById('statusFilter');
            statusFilter.innerHTML = `
                <option value="">Todos os Status</option>
                <option value="off">🔴 Motor Desligado</option>
                <option value="on">🟢 Motor Ligado</option>
                <option value="maintenance">🟠 Em Manutenção</option>
                <option value="stopped">🟡 Parado Ligado</option>
                <option value="secondary_motor_on">🔵 Motor Secundário</option>
                <optgroup label="Filtros Inteligentes">
                    <option value="ACTIVE">✅ Motores Ligados</option>
                    <option value="INACTIVE">❌ Motores Desligados</option>
                    <option value="CRITICAL">⚠️ Status Críticos</option>
                </optgroup>
                <optgroup label="Outros Status">
            `;
            
            const statuses = [...new Set(fleetData.map(item => item.status_code))];
            statuses.sort((a, b) => {
                const priorityA = statusConfig[a]?.priority || 999;
                const priorityB = statusConfig[b]?.priority || 999;
                return priorityA - priorityB;
            });
            
            const alreadyIncluded = ['off', 'on', 'maintenance', 'stopped', 'secondary_motor_on'];
            statuses.forEach(status => {
                if (!alreadyIncluded.includes(status)) {
                    const config = statusConfig[status] || { name: status };
                    const option = document.createElement('option');
                    option.value = status;
                    option.textContent = config.name;
                    statusFilter.appendChild(option);
                }
            });
            
            statusFilter.innerHTML += '</optgroup>';
        }

        function applyFilters() {
            const statusFilter = document.getElementById('statusFilter').value;
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const sortBy = document.getElementById('sortBy').value;
            
            const equipmentLatestStatus = getLatestStatusPerEquipment();
            
            filteredData = Object.values(equipmentLatestStatus).filter(equipment => {
                let matchesStatus = true;
                
                if (statusFilter) {
                    switch(statusFilter) {
                        case 'ACTIVE':
                            matchesStatus = statusConfig[equipment.latestStatus.status_code]?.active === true;
                            break;
                        case 'INACTIVE':
                            matchesStatus = statusConfig[equipment.latestStatus.status_code]?.active === false;
                            break;
                        case 'CRITICAL':
                            matchesStatus = ['maintenance', 'no_data', 'undefined', 'stopped', 'off'].includes(equipment.latestStatus.status_code);
                            break;
                        default:
                            matchesStatus = equipment.latestStatus.status_code === statusFilter;
                    }
                }
                
                const matchesSearch = !searchTerm || 
                    equipment.latestStatus.vacancy_name.toLowerCase().includes(searchTerm) ||
                    equipment.latestStatus.vacancy_code.toString().includes(searchTerm) ||
                    (equipment.abbreviatedName && equipment.abbreviatedName.toLowerCase().includes(searchTerm)) ||
                    abbreviateEquipmentName(equipment.latestStatus.vacancy_name).toLowerCase().includes(searchTerm);
                
                return matchesStatus && matchesSearch;
            });
            
            // Sort with priority for stopped motors
            filteredData.sort((a, b) => {
                const aIsStopped = a.latestStatus.status_code === 'off';
                const bIsStopped = b.latestStatus.status_code === 'off';
                
                if (aIsStopped && !bIsStopped) return -1;
                if (!aIsStopped && bIsStopped) return 1;
                
                switch(sortBy) {
                    case 'name':
                        const nameA = a.abbreviatedName || abbreviateEquipmentName(a.latestStatus.vacancy_name);
                        const nameB = b.abbreviatedName || abbreviateEquipmentName(b.latestStatus.vacancy_name);
                        return nameA.localeCompare(nameB);
                    case 'status':
                        const priorityA = statusConfig[a.latestStatus.status_code]?.priority || 999;
                        const priorityB = statusConfig[b.latestStatus.status_code]?.priority || 999;
                        return priorityA - priorityB;
                    case 'duration':
                        return b.totalActiveTime - a.totalActiveTime;
                    case 'efficiency':
                        return b.efficiency - a.efficiency;
                    default:
                        return 0;
                }
            });
            
            updateStats();
            
            const activeViewBtn = document.querySelector('.view-btn.active');
            const isGridView = activeViewBtn && activeViewBtn.textContent.includes('Grade');
            
            if (isGridView) {
                renderEquipmentGrid();
            } else {
                renderEquipmentList();
            }
        }

        function getLatestStatusPerEquipment() {
            const equipmentData = {};
            
            fleetData.forEach(item => {
                const equipment = item.vacancy_code;
                const abbreviatedName = abbreviateEquipmentName(item.vacancy_name);
                
                if (!equipmentData[equipment]) {
                    equipmentData[equipment] = {
                        code: equipment,
                        name: item.vacancy_name,
                        abbreviatedName: abbreviatedName,
                        timeline: [],
                        latestStatus: item,
                        totalActiveTime: 0,
                        totalTime: 0,
                        efficiency: 0
                    };
                }
                
                equipmentData[equipment].timeline.push(item);
                
                if (item.captured_at > equipmentData[equipment].latestStatus.captured_at) {
                    equipmentData[equipment].latestStatus = item;
                }
                
                if (statusConfig[item.status_code]?.active) {
                    equipmentData[equipment].totalActiveTime += item.total_time_h;
                }
                equipmentData[equipment].totalTime += item.total_time_h;
            });
            
            Object.values(equipmentData).forEach(equipment => {
                equipment.efficiency = equipment.totalTime > 0 ? 
                    (equipment.totalActiveTime / equipment.totalTime) * 100 : 0;
                
                equipment.timeline.sort((a, b) => new Date(a.start) - new Date(b.start));
            });
            
            return equipmentData;
        }

        function updateStats() {
            const equipmentData = getLatestStatusPerEquipment();
            const equipments = Object.values(equipmentData);
            
            const totalEquipments = equipments.length;
            const motorsOn = equipments.filter(eq => eq.latestStatus.status_code === 'on').length;
            const motorsOff = equipments.filter(eq => eq.latestStatus.status_code === 'off').length;
            const maintenanceEquipments = equipments.filter(eq => eq.latestStatus.status_code === 'maintenance').length;
            const stoppedEquipments = equipments.filter(eq => eq.latestStatus.status_code === 'stopped').length;
            
            document.getElementById('totalEquipments').textContent = totalEquipments;
            document.getElementById('motorsOn').textContent = motorsOn;
            document.getElementById('motorsOff').textContent = motorsOff;
            document.getElementById('maintenanceEquipments').textContent = maintenanceEquipments;
            document.getElementById('stoppedEquipments').textContent = stoppedEquipments;
        }

        function renderEquipmentList() {
            const container = document.getElementById('equipmentList');
            container.innerHTML = '';
            
            filteredData.forEach(equipment => {
                const row = createEquipmentRow(equipment);
                container.appendChild(row);
            });
            
            container.style.display = 'block';
        }

        function createEquipmentRow(equipment) {
            const row = document.createElement('div');
            const status = equipment.latestStatus;
            const config = statusConfig[status.status_code] || { 
                name: status.status_descr, 
                icon: 'fas fa-question',
                active: false 
            };
            
            const statusClass = config.active ? 'active' : 
                                status.status_code === 'maintenance' ? 'maintenance' : 
                                status.status_code === 'no_data' ? 'error' : 'inactive';
            
            row.className = 'equipment-row';
            
            row.innerHTML = `
                <div class="equipment-status ${statusClass}"></div>
                
                <div class="equipment-info">
                    <div class="equipment-name">
                        ${abbreviateEquipmentName(status.vacancy_name)}
                    </div>
                    <div class="equipment-code">#${status.vacancy_code}</div>
                </div>
                
                <div class="equipment-current-status status-${status.status_code}">
                    <i class="${config.icon}"></i>
                    ${config.name}
                    <span class="status-duration">${formatDuration(status.total_time_h)}</span>
                </div>
                
                <div class="equipment-timeline">
                    ${generateTimeline(equipment.timeline)}
                </div>
                
                <div class="equipment-duration">
                    ${formatTimeRange(status.start, status.end)}
                </div>
            `;
            
            return row;
        }

        function generateTimeline(timeline) {
            if (!timeline || timeline.length === 0) return '';
            
            const totalDuration = timeline.reduce((sum, item) => sum + item.total_time_h, 0);
            
            return timeline.slice(-8).map(item => {
                const config = statusConfig[item.status_code] || { color: '#64748b' };
                const percentage = totalDuration > 0 ? (item.total_time_h / totalDuration) * 100 : 0;
                
                return `<div class="timeline-segment" 
                            style="width: ${percentage}%; background-color: ${config.color};"
                            title="${config.name}: ${formatDuration(item.total_time_h)}"></div>`;
            }).join('');
        }

        function initializeCharts() {
            const ctx1 = document.getElementById('statusChart').getContext('2d');
            const ctx2 = document.getElementById('efficiencyChart').getContext('2d');
            
            statusChart = new Chart(ctx1, {
                type: 'doughnut',
                data: {
                    labels: [],
                    datasets: [{
                        data: [],
                        backgroundColor: [],
                        borderWidth: 3,
                        borderColor: getComputedStyle(document.documentElement).getPropertyValue('--bg-secondary'),
                        hoverBorderWidth: 5,
                        hoverBorderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim(),
                                usePointStyle: true,
                                font: { size: 12, weight: '600' },
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--bg-tertiary'),
                            titleColor: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim(),
                            bodyColor: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim(),
                            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--border'),
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    elements: {
                        arc: {
                            hoverOffset: 8
                        }
                    }
                }
            });
            
            efficiencyChart = new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Eficiência (%)',
                        data: [],
                        backgroundColor: [],
                        borderColor: [],
                        borderWidth: 2,
                        borderRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-muted').trim(),
                                font: { size: 11 },
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: {
                                color: getComputedStyle(document.documentElement).getPropertyValue('--border').trim()
                            }
                        },
                        x: {
                            ticks: {
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim(),
                                maxRotation: 45,
                                font: { size: 11, weight: '600' }
                            },
                            grid: {
                                display: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--bg-tertiary'),
                            titleColor: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim(),
                            bodyColor: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim(),
                            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--border'),
                            borderWidth: 1,
                            callbacks: {
                                title: function(context) {
                                    return context[0].label;
                                },
                                label: function(context) {
                                    return `Eficiência: ${context.parsed.y.toFixed(1)}%`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateCharts() {
            if (!statusChart || !efficiencyChart) return;
            
            const equipmentData = getLatestStatusPerEquipment();
            const equipments = Object.values(equipmentData);
            
            // Status distribution chart
            const statusCounts = {};
            equipments.forEach(eq => {
                const status = eq.latestStatus.status_code;
                const statusName = statusConfig[status]?.name || status;
                statusCounts[statusName] = (statusCounts[statusName] || 0) + 1;
            });
            
            const statusEntries = Object.entries(statusCounts).sort((a, b) => {
                const statusCodeA = Object.keys(statusConfig).find(code => statusConfig[code]?.name === a[0]);
                const statusCodeB = Object.keys(statusConfig).find(code => statusConfig[code]?.name === b[0]);
                const priorityA = statusConfig[statusCodeA]?.priority || 999;
                const priorityB = statusConfig[statusCodeB]?.priority || 999;
                return priorityA - priorityB;
            });
            
            const statusLabels = statusEntries.map(entry => entry[0]);
            const statusData = statusEntries.map(entry => entry[1]);
            const statusColors = statusLabels.map(label => {
                const statusCode = Object.keys(statusConfig).find(code => 
                    statusConfig[code]?.name === label);
                return statusConfig[statusCode]?.color || '#64748b';
            });
            
            statusChart.data.labels = statusLabels;
            statusChart.data.datasets[0].data = statusData;
            statusChart.data.datasets[0].backgroundColor = statusColors;
            statusChart.update();
            
            // Efficiency chart
            const topEquipments = equipments
                .sort((a, b) => {
                    const aIsStopped = a.latestStatus.status_code === 'off';
                    const bIsStopped = b.latestStatus.status_code === 'off';
                    
                    if (aIsStopped && !bIsStopped) return -1;
                    if (!aIsStopped && bIsStopped) return 1;
                    return b.efficiency - a.efficiency;
                })
                .slice(0, 8);
            
            const efficiencyLabels = topEquipments.map(eq => eq.abbreviatedName || abbreviateEquipmentName(eq.name));
            const efficiencyData = topEquipments.map(eq => eq.efficiency);
            
            const barColors = topEquipments.map(eq => {
                const status = eq.latestStatus.status_code;
                return statusConfig[status]?.color || '#64748b';
            });
            
            const barBorderColors = topEquipments.map(eq => {
                const status = eq.latestStatus.status_code;
                const baseColor = statusConfig[status]?.color || '#64748b';
                return baseColor.replace('rgb', 'rgba').replace(')', ', 1)');
            });
            
            efficiencyChart.data.labels = efficiencyLabels;
            efficiencyChart.data.datasets[0].data = efficiencyData;
            efficiencyChart.data.datasets[0].backgroundColor = barColors;
            efficiencyChart.data.datasets[0].borderColor = barBorderColors;
            efficiencyChart.update();
        }

        function formatDuration(hours) {
            const numHours = parseFloat(hours);
            if (isNaN(numHours) || numHours < 0) return '0min';
            
            if (numHours < 1) {
                const minutes = Math.round(numHours * 60);
                return minutes <= 0 ? '1min' : `${minutes}min`;
            }
            
            const wholeHours = Math.floor(numHours);
            const minutes = Math.round((numHours - wholeHours) * 60);
            
            if (minutes === 0) {
                return `${wholeHours}h`;
            }
            
            return `${wholeHours}h ${minutes}min`;
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function toggleTheme() {
            currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', currentTheme);
            
            const themeIcon = document.getElementById('themeIcon');
            themeIcon.className = currentTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
            
            setTimeout(() => {
                if (statusChart && efficiencyChart) {
                    statusChart.destroy();
                    efficiencyChart.destroy();
                    initializeCharts();
                    updateCharts();
                }
            }, 100);
        }

        function refreshDashboard() {
            const refreshIcon = document.getElementById('refreshIcon');
            refreshIcon.style.animation = 'spin 1s linear infinite';
            
            setTimeout(() => {
                applyFilters();
                updateCharts();
                updateLastUpdateTime();
                refreshIcon.style.animation = '';
                
                const notification = document.createElement('div');
                notification.className = 'refresh-notification';
                notification.innerHTML = `
                    <div class="notification-content success">
                        <i class="fas fa-check-circle"></i>
                        <span>Dashboard atualizado com sucesso!</span>
                    </div>
                `;
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    left: 50%;
                    transform: translateX(-50%);
                    background: linear-gradient(135deg, var(--success), #059669);
                    color: white;
                    border-radius: var(--radius-lg);
                    box-shadow: var(--shadow-lg);
                    z-index: 1000;
                    padding: 1rem 1.5rem;
                    display: flex;
                    align-items: center;
                    gap: 12px;
                    font-weight: 600;
                    animation: slideInDown 0.5s ease-out;
                `;
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 3000);
            }, 1000);
        }

        function exportReport() {
            const equipmentData = getLatestStatusPerEquipment();
            const equipments = Object.values(equipmentData);
            
            const csvData = [
                ['Código Abreviado', 'Código Original', 'Nome Completo', 'Status Atual', 'Eficiência (%)', 'Tempo Ativo (h)', 'Última Atualização']
            ];
            
            equipments.forEach(eq => {
                const config = statusConfig[eq.latestStatus.status_code] || {};
                const abbreviatedName = eq.abbreviatedName || abbreviateEquipmentName(eq.name);
                csvData.push([
                    abbreviatedName,
                    eq.code,
                    eq.name,
                    config.name || eq.latestStatus.status_descr,
                    eq.efficiency.toFixed(1),
                    eq.totalActiveTime.toFixed(1),
                    eq.latestStatus.captured_at.toLocaleString('pt-BR')
                ]);
            });
            
            const csvContent = csvData.map(row => row.join(',')).join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `relatorio-frota-${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            
            window.URL.revokeObjectURL(url);
        }

        function setView(viewType) {
            const buttons = document.querySelectorAll('.view-btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            
            const activeButton = Array.from(buttons).find(btn => 
                btn.textContent.includes(viewType === 'list' ? 'Lista' : 'Grade'));
            if (activeButton) {
                activeButton.classList.add('active');
            }
            
            const listView = document.getElementById('equipmentList');
            const gridView = document.getElementById('equipmentGrid');
            
            if (viewType === 'grid') {
                listView.style.display = 'none';
                gridView.style.display = 'grid';
                renderEquipmentGrid();
            } else {
                listView.style.display = 'block';
                gridView.style.display = 'none';
            }
        }

        function renderEquipmentGrid() {
            const container = document.getElementById('equipmentGrid');
            if (!container) return;
            
            container.innerHTML = '';
            
            filteredData.forEach(equipment => {
                const card = createEquipmentCard(equipment);
                container.appendChild(card);
            });
        }

        function createEquipmentCard(equipment) {
            const card = document.createElement('div');
            const status = equipment.latestStatus;
            const config = statusConfig[status.status_code] || { 
                name: status.status_descr, 
                icon: 'fas fa-question',
                active: false 
            };
            
            const isMotorOff = status.status_code === 'off';
            const timeline = equipment.timeline;
            const lastChange = new Date(status.captured_at);
            const timeSinceLastChange = Math.floor((Date.now() - lastChange.getTime()) / (1000 * 60));
            
            const cardType = config.active ? 'active' : 
                           status.status_code === 'maintenance' ? 'maintenance' : 
                           status.status_code === 'no_data' ? 'error' : 'inactive';
            
            card.className = `equipment-card ${cardType}`;
            
            const operationalStatus = config.active ? 'OPERACIONAL' : 'PARADO';
            const operationalClass = config.active ? 'operational' : 'stopped';
            
            const timeIndicator = timeSinceLastChange < 60 
                ? `${timeSinceLastChange}min atrás`
                : `${Math.floor(timeSinceLastChange / 60)}h ${timeSinceLastChange % 60}min atrás`;
            
            card.innerHTML = `
                <div class="card-header">
                    <div class="equipment-title-section">
                        <div class="card-title">
                            ${abbreviateEquipmentName(status.vacancy_name)}
                            ${isMotorOff ? '<span class="motor-off-warning"><i class="fas fa-stop"></i> DESLIGADO</span>' : ''}
                        </div>
                        <div class="card-subtitle">#${status.vacancy_code}</div>
                        <div class="operational-badge ${operationalClass}">
                            <i class="fas fa-circle"></i>
                            ${operationalStatus}
                        </div>
                    </div>
                    <div class="card-status-section">
                        <div class="card-status-badge status-${status.status_code}">
                            <i class="${config.icon}"></i>
                            ${config.name}
                        </div>
                        <div class="last-update">
                            ${timeIndicator}
                        </div>
                    </div>
                </div>
                
                <div class="status-events">
                    <div class="events-header">
                        <span class="events-title">Status do Equipamento</span>
                        <span class="events-count">${timeline.length} eventos</span>
                    </div>
                    ${timeline.map(event => {
                        const eventConfig = statusConfig[event.status_code] || { name: 'Desconhecido', icon: 'fas fa-question', color: '#64748b' };
                        return `
                            <div class="event-item" style="border-left-color: ${eventConfig.color};">
                                <div class="event-status" style="color: ${eventConfig.color};">
                                    <i class="${eventConfig.icon}"></i>
                                    ${eventConfig.name}
                                </div>
                                <div class="event-details">
                                    <div class="event-duration">${formatDuration(event.total_time_h)}</div>
                                    <div class="event-time">${formatTimeRange(event.start, event.end)}</div>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            `;
            
            return card;
        }

        function updateLastUpdateTime() {
            const now = new Date();
            document.getElementById('lastUpdate').textContent = 
                `Última atualização: ${now.toLocaleTimeString('pt-BR')}`;
        }

        function showLoading() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('equipmentList').style.display = 'none';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('equipmentList').style.display = 'block';
        }
    </script>
</body>
</html>
